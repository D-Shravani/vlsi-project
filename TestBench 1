`include "../rtl/PE.v"
`include "../rtl/NoC_Router.v"
`include "../rtl/NoC_Mesh.v"

module top;

  reg clk;
  reg rst_n;
  reg [255:0] mem_data_in;
  reg start;
  reg valid_in;

  wire [255:0] result;
  wire done;
  wire valid_out;

  integer i;

  // DUT Instantiation
  ai_accelerator dut (
    .clk(clk),
    .rst_n(rst_n),
    .data_in(mem_data_in[127:0]),
    .weights_in(mem_data_in[255:128]),
    .start(start),
    .valid_in(valid_in),
    .result(result),
    .done(done),
    .valid_out(valid_out)
  );

  // Clock Generation
  initial begin
    clk = 0;
    forever #5 clk = ~clk;
  end

  // Stimulus
  initial begin
    rst_n = 0;
    start = 0;
    valid_in = 0;
    mem_data_in = 256'b0;

    #10;
    @(posedge clk) rst_n = 1;

    // ---------------- Matrix Set 1 ----------------
    @(posedge clk) begin
      for (i = 0; i < 32; i = i + 1)
        mem_data_in[i*8 +: 8] = i + 1;
      valid_in = 1;
      start = 1;
    end

    @(posedge clk) begin
      start = 0;
      valid_in = 0;
    end

    wait(valid_out);
    @(posedge clk) begin
      $display("Results for Matrix Set 1:");
      for (i = 0; i < 16; i = i + 1)
        $display("result[%0d] = %d", i, result[i*16 +: 16]);
    end

    #40;

    // ---------------- Matrix Set 2 ----------------
    @(posedge clk) begin
      mem_data_in[127:0] = {
        8'd160,8'd150,8'd140,8'd130,
        8'd120,8'd110,8'd100,8'd90,
        8'd80,8'd70,8'd60,8'd50,
        8'd40,8'd30,8'd20,8'd10
      };

      mem_data_in[255:128] = {
        8'd16,8'd15,8'd14,8'd13,
        8'd12,8'd11,8'd10,8'd9,
        8'd8,8'd7,8'd6,8'd5,
        8'd4,8'd3,8'd2,8'd1
      };

      valid_in = 1;
      start = 1;
    end

    @(posedge clk) begin
      start = 0;
      valid_in = 0;
    end

    wait(valid_out);
    @(posedge clk) begin
      $display("Results for Matrix Set 2:");
      for (i = 0; i < 16; i = i + 1)
        $display("result[%0d] = %d", i, result[i*16 +: 16]);
    end

    #90;

    // ---------------- Matrix Set 3 ----------------
    @(posedge clk) begin
      // Fill all inputs with 1
      mem_data_in = {32{8'd1}};
      valid_in = 1;
      start = 1;
    end

    @(posedge clk) begin
      start = 0;
      valid_in = 0;
    end

    wait(valid_out);
    @(posedge clk) begin
      $display("Results for Matrix Set 3:");
      for (i = 0; i < 16; i = i + 1)
        $display("result[%0d] = %d", i, result[i*16 +: 16]);
    end

    #90 $finish;
  end

endmodule
